@page "/"
@using LogAnalyserSite.Data
@using Newtonsoft.Json
@using System.Net
@using System.Net.Sockets
@using System.Text
@using System.Text.RegularExpressions
@using Type = LogAnalyserSite.Data.Type

<PageTitle>Log Analyser</PageTitle>

<div class="btn-group" role="group" aria-label="Basic checkbox toggle button group">
    <EditForm OnSubmit="@ChangeFilter" Model="@_model">
        <InputCheckbox @bind-Value="_model.debugFilter" type="checkbox" class="btn-check" id="debugFilter" autocomplete="off"/>
        <label class="btn btn-outline-primary" for="debugFilter">Debug</label>

        <InputCheckbox @bind-Value="_model.infoFilter" type="checkbox" class="btn-check" id="infoFilter" autocomplete="off"/>
        <label class="btn btn-outline-info" for="infoFilter">Info</label>

        <InputCheckbox @bind-Value="_model.warnFilter" type="checkbox" class="btn-check" id="warnFilter" autocomplete="off"/>
        <label class="btn btn-outline-warning" for="warnFilter">Warning</label>

        <InputCheckbox @bind-Value="_model.errorFilter" type="checkbox" class="btn-check" id="errorFilter" autocomplete="off"/>
        <label class="btn btn-outline-danger" for="errorFilter">Error</label>

        <InputCheckbox @bind-Value="_model.otherFilter" type="checkbox" class="btn-check" id="otherFilter" autocomplete="off"/>
        <label class="btn btn-outline-secondary" for="otherFilter">Other</label>
        
        <InputCheckbox @bind-Value="_model.critFilter" type="checkbox" class="btn-check" id="critFilter" autocomplete="off"/>
        <label class="btn btn-outline-danger" for="critFilter">Critical</label>
        
        <InputText @bind-Value="_model.searchFilter" type="text" class="form-control" id="searchFilter" placeholder="Search"/>
        <InputCheckbox @bind-Value="_model.regex" type="checkbox" class="btn-check" id="regex" autocomplete="off"/>
        <label class="btn btn-outline-secondary" for="regex">Regex</label>
    </EditForm>
</div>

<div id="console" class="container">
    <table class="table">
        <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Time</th>
            <th scope="col">Type</th>
            <th scope="col">Message</th>
        </tr>
        </thead>
        <tbody>
        @foreach (LogLine logline in data.Where(logline => ((@logline.type == Type.DEBUG && _model.debugFilter) ||
                                                            (@logline.type == Type.INFO && _model.infoFilter) ||
                                                            (@logline.type == Type.WARN && _model.warnFilter) ||
                                                            (@logline.type == Type.ERROR && _model.errorFilter) ||
                                                            (@logline.type == Type.OTHER && _model.otherFilter) ||
                                                            (@logline.type == Type.CRIT && _model.critFilter)) &&
                                                           (@logline.message.ToLower().Contains(_model.searchFilter.ToLower()) && !_model.regex) ||
                                                           (Regex.IsMatch(@logline.message, _model.searchFilter) && _model.regex))) {
            <tr>
                <td>@logline.date</td>
                <td>@logline.time</td>
                <td>@logline.type</td>
                <td>@logline.message</td>
            </tr>
        }
        </tbody>
    </table>
</div>
@code{
    List<LogLine> data = new List<LogLine>();
    FilterModel _model = new FilterModel();
    TcpClient client;
    GenerateLogModel emptyModel = new GenerateLogModel();
    protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TcpListener server = new TcpListener(IPAddress.Parse("127.0.0.1"), 65432);
            server.Start();
            client = server.AcceptTcpClient();
            Console.WriteLine("A client connected.");
        }
        else
        {
            NetworkStream stream = client.GetStream();
            byte[] bytes = new byte[1024];
            int bytesRead = stream.Read(bytes, 0, bytes.Length);
            string data = Encoding.ASCII.GetString(bytes, 0, bytesRead);
            if (data.Length > 0) {
                Console.WriteLine($"Received: {data}");
                LogLine logLine = JsonConvert.DeserializeObject<LogLine>(data);
                this.data.Add(logLine);
            }
        }
        StateHasChanged();
        return base.OnAfterRenderAsync(firstRender);
    }

    private void ChangeFilter()
    {
        StateHasChanged();
    }
}